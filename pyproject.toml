[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pdf_utility"
version = "1.0.0"
authors = [
    {name = "Matt Himrod", email = "matt@matthimrod.com"}
]
description = "Matt's PDF Library of Functions That Probably Already Exist Elsewhere"
requires-python = ">3.9"
dependencies = [
    "pypdf"
]

[tools.hatch.build.targets.wheel]
packages = ["pdf_utility"]

[project.scripts]
pdf_utility = "pdf_utility:run"

[tool.mypy]
files = "pdf_utility/"
mypy_path = "pdf_utility/"

[tool.bandit]

[tool.flake8]
filename = "pdf_utility/"
max-line-length = 100

[tool.pylint.main]
source-roots = ["pdf_utility/"]
fail-under = 9.75

# Files or directories to be skipped. They should be base names, not paths.
ignore = []

# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths. The default value ignores Emacs
# file locks
ignore-patterns = ["^\\.#"]

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs. (default: 1)
jobs = 0

# Pickle collected data for later comparisons.
persistent = true

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.

[tool.pylint.basic]
# Regular expression which should only match function or class names that do not
# require a docstring.
no-docstring-rgx = "^(?:test|mock)?_"

[tool.pylint.design]
# Minimum number of public methods for a class (see R0903). (default: 2)
min-public-methods = 0

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO"]

# Activate the evaluation score.
score = true
